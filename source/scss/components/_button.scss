//////////////////////////////
// Button Component Mixins
//////////////////////////////

//////////////////////////////
// Button Component Default Variables
$button-base-extend: true !default;
$button-size-normal-extend: true !default;
$button-size-large-extend: true !default;
$button-colors-extend: true !default;
$button-color-default: $cs-button-color-default !default;
$button-color-adjust: 20% !default;
$button-text-color-default: $cs-button-text-color-default !default;
//////////////////////////////

@mixin button-base($extend: $button-base-extend, $important: null) {
  @if $extend {
    @extend %button-base-extend;
  } @else {
    @if $important == true { $important: !important; }
    @extend %link-unset-background-extend;
    display: inline-block $important;
    border-radius: 0 $important;
    font: {
      family: $font-slab $important;
      weight: normal $important;
      style: italic $important;
    }
    text: {
      decoration: none $important;
    }
    white-space: nowrap $important;
  }
}

@mixin button-size-normal($extend: $button-size-normal-extend, $important: null) {
  @if $extend {
    @extend %button-size-normal-extend;
  } @else {
    @if $important == true { $important: !important; }
    padding: 0.2em 0.5em $important;
    font-size: ms(1) $important;
    line-height: 1.25 $important;
  }
}

@mixin button-size-large($extend: $button-size-large-extend, $important: null) {
  @if $extend {
    @extend %button-size-large-extend;
  } @else {
    @if $important == true { $important: !important; }
    padding: 0.5em 0.75em $important;
    font-size: ms(2) $important;
    line-height: 1.5 $important;
  }
}

@mixin button-text-color($button-color: $button-color-default, $button-text-color: $button-text-color-default, $important: null) {
  @if $important == true { $important: !important; }
  @if $button-text-color != false {
    color: $button-text-color $important;
  } @else if cs-is-dark($button-color) {
    color: $contrasted-light-default $important;
  } @else {
    color: $contrasted-dark-default $important;
  }
}

@mixin button-background($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust, $important: null) {
  @if $important == true { $important: !important; }
  background-color: $button-color $important;
  border: 1px solid blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * -.25)) $important;
}

@mixin button-hover($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust, $important: null) {
  @if $important == true { $important: !important; }
  @if cs-is-dark($button-color) {
    &:hover {
      background-color: blend-screen($button-color, adjust-color($button-color, $lightness: $button-adjust * -.25)) $important;
    }
  } @else {
    &:hover {
      background-color: blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * -.25)) $important;
    }
  }
}

@mixin button-active($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust, $important: null) {
  @if $important == true { $important: !important; }
  @if cs-is-dark($button-color) {
    &:active {
      background-color: blend-screen($button-color, adjust-color($button-color, $lightness: $button-adjust * 1)) $important;
    }
  } @else {
    &:active {
      background-color: blend-multiply($button-color, adjust-color($button-color, $lightness: $button-adjust * 1)) $important;
    }
  }
}

@mixin button-colors($button-color: $button-color-default, $button-text-color: $button-text-color-default, $button-adjust: $button-color-adjust, $extend: $button-colors-extend, $important: null) {
  @if ($button-color != $button-color-default) or ($button-text-color != $button-text-color-default) {
    $extend: false;
  }
  @if $extend {
    @extend %button-colors-extend;
  } @else {
    @include button-text-color($button-color, $button-text-color, $important: $important);
    @include button-background($button-color, $button-text-color, $button-adjust, $important: $important);
    @include button-hover($button-color, $button-text-color, $button-adjust, $important: $important);
    @include button-active($button-color, $button-text-color, $button-adjust, $important: $important);
  }
}

//////////////////////////////
// Button Component Extendable Classes
//////////////////////////////
%button-base-extend {
  @include button-base(false);
}

%button-size-normal-extend {
  @include button-size-normal(false);
}

%button-size-large-extend {
  @include button-size-large(false);
}

%button-colors-extend {
  @include button-colors($extend: false);
}

%button {
  @include button-base(true);
  @include button-size-normal(true);
  @include button-colors($extend: true);
}

%button-big {
  @include button-base(true);
  @include button-size-large(true);
  @include button-colors($extend: true);
}

%button-warning {
  @extend %warning;
  @include button-hover($cs-status-warning);
  @include button-active($cs-status-warning);
}

%button-light {
  @include button-base(true);
  @include button-colors(nth($primary-tints, 3));
}

%button-disabled {
  @include button-base(true);
  @include button-colors(nth($secondary-shades, 2), nth($secondary-tints, 3));
}

%button-text {
  @include button-base(true);
}


%button-cta {
  @include button-base(true);
  @include button-size-normal(true);
  @include button-colors($button-color: nth($primary-shades, 4));
}

//////////////////////////////
// Button Component
//////////////////////////////

.call-to-action {
  @extend %button-cta;
}

.big-button {
  @extend %button-big;
}

.big-button.warning {
  @extend %button-warning;
}

.btn {
  @extend %button;
}

.btn--big {
  @extend %button-big;
}

.btn--full {
  width: 100%;
}

.btn--light {
  @extend %button-light;
}

.btn--disabled,
.btn[disabled] {
  @extend %button-disabled;
}

.btn--text {
  @extend %button-text;
}
